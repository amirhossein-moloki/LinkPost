# Generated by Django 5.2.6 on 2025-10-01 14:17

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ContentSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the source (e.g., 'Django News').",
                        max_length=255,
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("RSS", "RSS"),
                            ("WEB", "Website"),
                            ("API", "API"),
                            ("SOCIAL", "Social Media"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "base_url",
                    models.URLField(
                        help_text="Main URL of the source.", max_length=500
                    ),
                ),
                (
                    "feed_url",
                    models.URLField(
                        blank=True,
                        help_text="URL for the RSS/Atom feed, if applicable.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "reliability_score",
                    models.FloatField(
                        default=0.8,
                        help_text="A score from 0.0 to 1.0 indicating source reliability.",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="CrawlJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("run_date", models.DateField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("QUEUED", "Queued"),
                            ("RUNNING", "Running"),
                            ("SUCCEEDED", "Succeeded"),
                            ("FAILED", "Failed"),
                            ("PARTIAL", "Partial Success"),
                        ],
                        default="QUEUED",
                        max_length=10,
                    ),
                ),
                ("topics_count", models.PositiveIntegerField(default=0)),
                ("sources_count", models.PositiveIntegerField(default=0)),
                ("queries_count", models.PositiveIntegerField(default=0)),
                ("findings_count", models.PositiveIntegerField(default=0)),
                (
                    "errors",
                    models.TextField(
                        blank=True,
                        help_text="Summary of errors encountered during the job.",
                        null=True,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "Crawl Jobs",
                "ordering": ["-run_date"],
            },
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Title of the topic (e.g., 'Python')",
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("slug", models.SlugField(editable=False, max_length=255, unique=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A brief description of the topic.",
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=100, help_text="Crawl priority (lower is higher)."
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this topic is currently being crawled.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DiscoveredContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(
                        help_text="The unique, canonical URL for the content.",
                        max_length=2048,
                        unique=True,
                    ),
                ),
                (
                    "url_hash",
                    models.CharField(
                        editable=False,
                        help_text="SHA-256 hash of the canonical URL for indexing.",
                        max_length=64,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                (
                    "excerpt",
                    models.TextField(
                        blank=True, help_text="A short summary or excerpt.", null=True
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Original publication date of the content.",
                        null=True,
                    ),
                ),
                ("language", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("ARTICLE", "Article"),
                            ("BLOG", "Blog Post"),
                            ("DOC", "Documentation"),
                            ("RELEASE", "Release Notes"),
                            ("TWEET", "Tweet"),
                            ("VIDEO", "Video"),
                            ("OTHER", "Other"),
                        ],
                        default="ARTICLE",
                        max_length=10,
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        default=0.0, help_text="Score of relevance to the query/topic."
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Overall quality score based on various metrics.",
                    ),
                ),
                ("is_duplicate", models.BooleanField(default=False)),
                (
                    "raw_payload",
                    models.JSONField(
                        blank=True,
                        help_text="Raw data returned from the source API/scrape.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "source",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="discoveries",
                        to="search.contentsource",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        help_text="The primary topic this content was discovered for.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="search.topic",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Discovered Content",
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ContentEnrichment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "summary",
                    models.TextField(help_text="A concise summary of the content."),
                ),
                (
                    "simple_explanation",
                    models.TextField(
                        help_text="'Explain Like I'm 5' style explanation."
                    ),
                ),
                (
                    "key_points",
                    models.JSONField(help_text="A list of key bullet points."),
                ),
                (
                    "hashtags",
                    models.JSONField(
                        blank=True, help_text="A list of suggested hashtags.", null=True
                    ),
                ),
                (
                    "read_time",
                    models.IntegerField(
                        blank=True,
                        help_text="Estimated read time in minutes.",
                        null=True,
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        blank=True,
                        help_text="Model's confidence in the quality of the enrichment.",
                        null=True,
                    ),
                ),
                (
                    "model_meta",
                    models.JSONField(
                        blank=True,
                        help_text="Details about the model/prompt used.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrichment",
                        to="search.discoveredcontent",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Content Enrichments",
            },
        ),
        migrations.CreateModel(
            name="PostCandidate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        help_text="Target platform (e.g., 'LinkedIn', 'X').",
                        max_length=50,
                    ),
                ),
                ("lang", models.CharField(default="en", max_length=10)),
                ("tone", models.CharField(default="Professional", max_length=50)),
                (
                    "body_text",
                    models.TextField(help_text="The suggested text for the post."),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("APPROVED", "Approved"),
                            ("SCHEDULED", "Scheduled"),
                            ("PUBLISHED", "Published"),
                            ("REJECTED", "Rejected"),
                            ("FAILED", "Failed"),
                        ],
                        default="DRAFT",
                        max_length=10,
                    ),
                ),
                ("intended_publish_time", models.DateTimeField(blank=True, null=True)),
                (
                    "external_post_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of the post on the external platform.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True,
                        help_text="Additional metadata (e.g., CTA, UTM links).",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "content",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="candidates",
                        to="search.discoveredcontent",
                    ),
                ),
                (
                    "topics",
                    models.ManyToManyField(
                        related_name="post_candidates", to="search.topic"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Post Candidates",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ModerationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "checks",
                    models.JSONField(
                        blank=True,
                        help_text="Results of automated checks (e.g., length, keywords).",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PASSED", "Passed"),
                            ("NEEDS_REVIEW", "Needs Review"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="NEEDS_REVIEW",
                        max_length=15,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from the moderator or system.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post_candidate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="moderation_logs",
                        to="search.postcandidate",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Moderation Logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TopicQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query_text",
                    models.CharField(
                        help_text="The search query string (keywords, operators).",
                        max_length=500,
                    ),
                ),
                (
                    "filters",
                    models.JSONField(
                        blank=True,
                        help_text="Structured filters (e.g., domains, languages).",
                        null=True,
                    ),
                ),
                (
                    "recency_window",
                    models.IntegerField(
                        default=30,
                        help_text="Desired recency in days (e.g., 30 for the last month).",
                    ),
                ),
                (
                    "lang_pref",
                    models.CharField(
                        default="en",
                        help_text="Preferred content language (e.g., 'en', 'fa').",
                        max_length=10,
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        default=1.0,
                        help_text="Weight of this query's influence on scoring.",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="queries",
                        to="search.topic",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Topic Queries",
            },
        ),
        migrations.CreateModel(
            name="FetchLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "request_signature",
                    models.CharField(
                        help_text="A unique signature for the request (e.g., URL + params).",
                        max_length=1024,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Success"),
                            ("RATE_LIMITED", "Rate Limited"),
                            ("ERROR", "Error"),
                        ],
                        max_length=15,
                    ),
                ),
                ("items_found", models.PositiveIntegerField(default=0)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                ("error_detail", models.TextField(blank=True, null=True)),
                (
                    "crawl_job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fetch_logs",
                        to="search.crawljob",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="search.contentsource",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="search.topic",
                    ),
                ),
                (
                    "topic_query",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="search.topicquery",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Fetch Logs",
                "ordering": ["-started_at"],
            },
        ),
        migrations.AddField(
            model_name="discoveredcontent",
            name="topic_query",
            field=models.ForeignKey(
                help_text="The specific query that found this content.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="search.topicquery",
            ),
        ),
    ]
